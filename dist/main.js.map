{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/cell-boom.js","webpack:///./src/cell-empty.js","webpack:///./src/cell.js","webpack:///./src/game.js","webpack:///./src/index.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA,OAAO,KAAK,GAAG,mBAAO,CAAC,6BAAQ;;AAExB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,C;;;;;;;;;;;;ACZA;AAAA;AAAA,OAAO,KAAK,GAAG,mBAAO,CAAC,6BAAQ;;AAExB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,C;;;;;;;;;;;;ACZA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;;ACvBA;AAAA;AAAA;AACA;AACA,CAAC,GAAG,mBAAO,CAAC,yCAAc;AAC1B;AACA;AACA,CAAC,GAAG,mBAAO,CAAC,uCAAa;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,iBAAiB;AACxC,2BAA2B,gBAAgB;AAC3C;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,C;;;;;;;;;;;AC5IA,OAAO,KAAK,GAAG,mBAAO,CAAC,6BAAQ;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,E","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","const {Cell} = require('./cell');\r\n\r\nexport class CellBoom extends Cell{\r\n    constructor(x, y, width, height) {\r\n        super(x, y, width, height);\r\n        this.node.classList.add('cell-boom');\r\n    }\r\n    show() {\r\n        this.node.classList.add('cell-boom-clicked');\r\n        this.node.innerHTML = 'ðŸ’£';\r\n    }\r\n\r\n}","const {Cell} = require('./cell');\r\n\r\nexport class CellEmpty extends Cell{\r\n    constructor(x, y, width, height) {\r\n        super(x, y, width, height);\r\n    }\r\n    show(count) {\r\n        this.isOpened = true;\r\n        this.node.classList.add('cell-empty-clicked');\r\n        this.node.innerHTML = count || '';\r\n    }\r\n\r\n}","export class Cell {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.node = document.createElement('DIV');\r\n        this.node.className = 'cell';\r\n        this.isOpened = false;\r\n        this.node['data-type'] = this;\r\n\r\n        Object.assign(this.node.style, {\r\n            top: y * height + 'px',\r\n            left: x * width + 'px',\r\n            width: width + 'px',\r\n            height: height + 'px'\r\n        });\r\n    }\r\n    render(root) {\r\n        root.append(this.node);\r\n    }\r\n\r\n    setFlag() {\r\n        this.node.classList.toggle('cell-flag-clicked');\r\n    }\r\n}","const {\r\n    CellEmpty\r\n} = require('./cell-empty');\r\nconst {\r\n    CellBoom\r\n} = require('./cell-boom');\r\n\r\nconst matrixQ = [\r\n    [-1, -1],\r\n    [0, -1],\r\n    [1, -1],\r\n    [-1, 0],\r\n    [1, 0],\r\n    [-1, 1],\r\n    [0, 1],\r\n    [1, 1]\r\n];\r\n\r\nexport class Game {\r\n    constructor(options) {\r\n        const {\r\n            width,\r\n            height,\r\n            root,\r\n            cellWidth,\r\n            cellHeight\r\n        } = options;\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n        this.cellWidth = cellWidth;\r\n        this.cellHeight = cellHeight;\r\n        this.cells = [];\r\n\r\n        this.root = root;\r\n        const sandbox = {\r\n            getCountAroundBomb: this.getCountAroundBomb,\r\n            clickAround: this.clickAround\r\n        }\r\n\r\n        for (let y = 0; y < this.height; y++) {\r\n            for (let x = 0; x < this.width; x++) {\r\n                let cell = null;\r\n\r\n                if (Math.random() > 0.1) {\r\n                    cell = new CellEmpty(x, y, cellWidth, cellHeight);\r\n                } else {\r\n                    cell = new CellBoom(x, y, cellWidth, cellHeight, sandbox);\r\n                }\r\n                this.cells.push(cell);\r\n                cell.render(root);\r\n            }\r\n        }\r\n\r\n        this.bindEvent();\r\n        this.contextEvent();\r\n\r\n    }\r\n\r\n    getCellByPoint(x, y) {\r\n        if ((x <= this.width - 1) && (x >= 0) && (y <= this.height - 1) && (y >= 0)) {\r\n            const position = y * this.width + x;\r\n            return this.cells[position];\r\n        } else return\r\n    }\r\n\r\n    clickAround(x, y) {\r\n        matrixQ.forEach((point) => {\r\n            if ((x <= this.width - 1) && (x >= 0) && (y <= this.height - 1) && (y >= 0)) {\r\n                const cell = this.getCellByPoint(x + point[0], y + point[1]);\r\n                if ((cell) && (!cell.node.classList.contains('cell-empty-clicked'))) {\r\n                    const count = this.getCountAroundBomb(x + point[0], y + point[1]);\r\n                    if ((cell.isOpened == false) && (count === 0)) {\r\n                        cell.show();\r\n                        this.clickAround(x + point[0], y + point[1])\r\n                    } else cell.show(count);\r\n                } else return\r\n            }\r\n            return\r\n        })\r\n    }\r\n\r\n    getCountAroundBomb(x, y) {\r\n        return matrixQ.reduce((acc, point) => {\r\n            const cell = this.getCellByPoint(x + point[0], y + point[1]);\r\n            return acc + Number(cell instanceof CellBoom);\r\n        }, 0);\r\n    }\r\n\r\n    bindEvent() {\r\n        this.root.addEventListener('click', event => {\r\n            const cell = event.target['data-type'];\r\n            //debugger\r\n            if (!cell.node.classList.contains('cell-flag-clicked')) {\r\n                if (cell instanceof CellBoom) {\r\n                    cell.show();\r\n                    const bombs = document.querySelectorAll('div.cell.cell-boom');\r\n\r\n                    bombs.forEach(function (cell, currentIndex) {\r\n                        setTimeout(function () {\r\n                            cell['data-type'].show();\r\n                        }, 1200 * currentIndex);\r\n                    });\r\n                    alert('Game Over');\r\n\r\n                } else if (cell instanceof CellEmpty) {\r\n                    const count = this.getCountAroundBomb(cell.x, cell.y)\r\n                    cell.show(count);\r\n                    this.countOpenCells();\r\n                    if (count === 0) {\r\n                        this.clickAround(cell.x, cell.y)\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    contextEvent() {\r\n        this.root.addEventListener('contextmenu', event => {\r\n            const cell = event.target['data-type'];\r\n            if (cell.isOpened == false) {\r\n                cell.setFlag();\r\n                event.preventDefault();\r\n            }\r\n        });\r\n    }\r\n\r\n    countOpenCells() {\r\n        let counter = 0;\r\n        let cells = document.querySelectorAll('div.cell');\r\n        let bombsNumber = document.querySelectorAll('div.cell.cell-boom').length;\r\n\r\n        cells.forEach((el) => {\r\n            if (el['data-type'].isOpened)\r\n                counter += 1;\r\n        })\r\n        if (counter === (this.width * this.height - bombsNumber))\r\n            alert('Congratulation!');\r\n\r\n    }\r\n}","const {Game} = require('./game');\r\n\r\nconst game = new Game({\r\n    width: 10,\r\n    height: 10, \r\n    cellWidth: 50,\r\n    cellHeight: 50,\r\n    root: document.querySelector('#gameArea')\r\n});"],"sourceRoot":""}